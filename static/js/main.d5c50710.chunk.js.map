{"version":3,"sources":["Card.js","Pinboard.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","isDragging","connectDragSource","card","isPinned","style","opacity","background","color","react_default","a","createElement","className","text","Component","DragSource","beginDrag","endDrag","monitor","component","didDrop","handleDrop","id","connect","dragSource","connectDragPreview","dragPreview","Pinboard","connectDropTarget","hovered","pinned","backgroundColor","DropTarget","dropTarget","isOver","item","getItem","APP_TITLE","App","state","cards","componentDidMount","document","title","deleteCard","_this","setState","prevState","index","findIndex","splice","updatePinned","newPinnedIndex","_this2","map","src_Card","key","src_Pinboard","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5c50710.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\n\nconst cardSource = {\n    beginDrag(props) {\n        return props.card;\n    },\n    endDrag(props, monitor, component) {\n        if (!monitor.didDrop()) {\n            return;\n        }\n\n        return props.handleDrop(props.card.id);\n    }\n}\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nclass Card extends Component {\n    render() {        \n        const { isDragging, connectDragSource, card, isPinned } = this.props;\n\n        let style = {\n             opacity: isDragging ? 0 : 1,\n             background: isPinned ? 'brown' : 'beige',\n             color: isPinned ? 'white' : 'black'\n        }\n\n        return connectDragSource(\n            <div className=\"card\" style={style}>\n                <span>{card.text}</span>\n            </div>\n        )\n    }\n}\n\nexport default DragSource('card', cardSource, collect)(Card);","import React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd';\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        hovered: monitor.isOver(),\n        item: monitor.getItem()\n    }\n}\n\nclass Pinboard extends Component {\n    render() {\n        const { connectDropTarget, hovered, pinned } = this.props;\n        const backgroundColor = hovered ? 'lightgreen' : 'brown';\n\n        if (pinned) {\n            return connectDropTarget(\n                <div className=\"grid pinboard\" style={{background: backgroundColor}}>\n                    <div className=\"centered\">\n                        {pinned.text}\n                    </div>\n                </div>\n            );\n        }\n\n        return connectDropTarget(\n            <div className=\"grid pinboard\" style={{background: backgroundColor}}>\n                <div className=\"centered\">\n                    Drag a card here.\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DropTarget('card', {}, collect)(Pinboard);","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './Card';\nimport Pinboard from './Pinboard';\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext } from 'react-dnd'\n\nconst APP_TITLE = \"Agile Principles Pinboard\";\n\nclass App extends Component {  \n  state = {\n    cards: [\n      { id: 1, text: 'Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.' },\n      { id: 2, text: 'Welcome changing requirements, even late in development. Agile processes harness change for the customer\\'s competitive advantage.' },\n      { id: 3, text: 'Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.' },\n      { id: 4, text: 'Business people and developers must work together daily throughout the project.' },\n      { id: 5, text: 'Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.' },\n      { id: 6, text: 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' },\n      { id: 7, text: 'Working software is the primary measure of progress.' },\n      { id: 8, text: 'Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.' },\n      { id: 9, text: 'Continuous attention to technical excellence and good design enhances agility.' },\n      { id: 10, text: 'Simplicity--the art of maximizing the amount of work not done--is essential.' },\n      { id: 11, text: 'The best architectures, requirements, and designs emerge from self-organizing teams.' },\n      { id: 12, text: 'At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. ' },\n    ],\n    pinned: null\n  }\n\n  componentDidMount = () => {\n    document.title = APP_TITLE;\n  }\n\n  deleteCard = (id) => {\n    this.setState(prevState => {\n      let cards = prevState.cards;\n      const index = cards.findIndex(card => card.id === id);\n      cards.splice(index, 1);\n      return { cards };\n    })\n  }\n\n  updatePinned = (id) => {\n    this.setState(prevState => {\n      const { cards } = prevState;\n      const newPinnedIndex = cards.findIndex(card => card.id === id);\n      const newPinned = cards[newPinnedIndex];\n      return { pinned: newPinned };\n    });\n  }\n\n  isPinned(card){\n    return this.state.pinned && this.state.pinned.id === card.id;\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"cards\">\n          <div className=\"row\">\n            {this.state.cards.map((card, index) => (\n                  <Card key={card.id} card={card} isPinned={this.isPinned(card)} handleDrop={(id) =>\n                    this.updatePinned(id)} />\n                ))}\n          </div>\n        </div>\n        <Pinboard pinned={this.state.pinned}/>\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}