{"version":3,"sources":["Card.js","Pinboard.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","isDragging","connectDragSource","card","isPinned","style","opacity","background","color","react_default","a","createElement","className","text","Component","DragSource","beginDrag","endDrag","monitor","component","didDrop","handleDrop","id","connect","dragSource","connectDragPreview","dragPreview","Pinboard","connectDropTarget","hovered","pinned","backgroundColor","DropTarget","dropTarget","isOver","item","getItem","APP_TITLE","App","state","cards","componentDidMount","document","title","deleteCard","_this","setState","prevState","index","findIndex","splice","updatePinned","newPinnedIndex","_this2","map","src_Card","key","src_Pinboard","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.384c3f7f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { DragSource } from 'react-dnd';\r\n\r\nconst cardSource = {\r\n    beginDrag(props) {\r\n        return props.card;\r\n    },\r\n    endDrag(props, monitor, component) {\r\n        if (!monitor.didDrop()) {\r\n            return;\r\n        }\r\n\r\n        return props.handleDrop(props.card.id);\r\n    }\r\n}\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        connectDragPreview: connect.dragPreview(),\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\n\r\nclass Card extends Component {\r\n    render() {        \r\n        const { isDragging, connectDragSource, card, isPinned } = this.props;\r\n\r\n        let style = {\r\n             opacity: isDragging ? 0 : 1,\r\n             background: isPinned ? 'brown' : 'beige',\r\n             color: isPinned ? 'white' : 'black'\r\n        }\r\n\r\n        return connectDragSource(\r\n            <div className=\"card\" style={style}>\r\n                <span>{card.text}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DragSource('card', cardSource, collect)(Card);","import React, { Component } from 'react';\r\nimport { DropTarget } from 'react-dnd';\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        connectDropTarget: connect.dropTarget(),\r\n        hovered: monitor.isOver(),\r\n        item: monitor.getItem()\r\n    }\r\n}\r\n\r\nclass Pinboard extends Component {\r\n    render() {\r\n        const { connectDropTarget, hovered, pinned } = this.props;\r\n        const backgroundColor = hovered ? 'lightgreen' : 'brown';\r\n\r\n        if (pinned) {\r\n            return connectDropTarget(\r\n                <div className=\"grid pinboard\" style={{background: backgroundColor}}>\r\n                    <div className=\"centered\">\r\n                        {pinned.text}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return connectDropTarget(\r\n            <div className=\"grid pinboard\" style={{background: backgroundColor}}>\r\n                <div className=\"centered\">\r\n                    Drag a card here.\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropTarget('card', {}, collect)(Pinboard);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Card from './Card';\r\nimport Pinboard from './Pinboard';\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport { DragDropContext } from 'react-dnd'\r\n\r\nconst APP_TITLE = \"Agile Principles Pinboard\";\r\n\r\nclass App extends Component {  \r\n  state = {\r\n    cards: [\r\n      { id: 1, text: 'Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.' },\r\n      { id: 2, text: 'Welcome changing requirements, even late in development. Agile processes harness change for the customer\\'s competitive advantage.' },\r\n      { id: 3, text: 'Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.' },\r\n      { id: 4, text: 'Business people and developers must work together daily throughout the project.' },\r\n      { id: 5, text: 'Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.' },\r\n      { id: 6, text: 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' },\r\n      { id: 7, text: 'Working software is the primary measure of progress.' },\r\n      { id: 8, text: 'Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.' },\r\n      { id: 9, text: 'Continuous attention to technical excellence and good design enhances agility.' },\r\n      { id: 10, text: 'Simplicity--the art of maximizing the amount of work not done--is essential.' },\r\n      { id: 11, text: 'The best architectures, requirements, and designs emerge from self-organizing teams.' },\r\n      { id: 12, text: 'At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. ' },\r\n    ],\r\n    pinned: null\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.title = APP_TITLE;\r\n  }\r\n\r\n  deleteCard = (id) => {\r\n    this.setState(prevState => {\r\n      let cards = prevState.cards;\r\n      const index = cards.findIndex(card => card.id === id);\r\n      cards.splice(index, 1);\r\n      return { cards };\r\n    })\r\n  }\r\n\r\n  updatePinned = (id) => {\r\n    this.setState(prevState => {\r\n      const { cards } = prevState;\r\n      const newPinnedIndex = cards.findIndex(card => card.id === id);\r\n      const newPinned = cards[newPinnedIndex];\r\n      return { pinned: newPinned };\r\n    });\r\n  }\r\n\r\n  isPinned(card){\r\n    return this.state.pinned && this.state.pinned.id === card.id;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"cards\">\r\n          <div className=\"row\">\r\n            {this.state.cards.map((card, index) => (\r\n                  <Card key={card.id} card={card} isPinned={this.isPinned(card)} handleDrop={(id) =>\r\n                    this.updatePinned(id)} />\r\n                ))}\r\n          </div>\r\n        </div>\r\n        <Pinboard pinned={this.state.pinned}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragDropContext(HTML5Backend)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}